// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./prisma/generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Pre-definir valores de enumeração

enum Genero {
  MASCULINO
  FEMININO
}

enum Propriedade {
  PROPRIA
  RENDA
}

enum Sector {
  PUBLICO
  PRIVADO
}

enum Area {
  ADMINISTRACAO_PUBLICA
  EDUCACAO
  SAUDE
  DEFESA_SEGURANCA
  ENERGIA
  PETROLEO
  MINERACAO
  FINANCAS
  CONSTRUCAO
  TECNOLOGIA
  COMERCIO
  AGRICULTURA
  TURISMO
}

enum Comprovativo {
  BILHETE
  DECLARACAO_TRABALHO
  DECLARACAO_SEGURO
  BEM_MOVEL
  ORDEM_DEBITO
  DEPOSITO
  LEVANTAMENTO
  RECIBO
}

enum Parentesco {
  PAI
  MAE
  FILHO
  FILHA
  AVO
  NETO
  NETA
  IRMAO
  IRMA
  TIO
  TIA
  SOBRINHO
  SOBRINHA
  PRIMO
  PRIMA
  CUNHADO
  CUNHADA
  SOGRO
  SOGRA
  GENRO
  NORA
  ENTEADO
  ENTEADA
  PADRASTO
  MADRASTA
}

enum Aval {
  CREDITO
  EMPRESTIMO
}

enum Modelo {
  CARRO
  MOTO
}

enum Progresso {
  PENDENTE
  CONCLUIDO
  CANCELADO
}

enum Produto {
  CONSUMO
  DECIMA
  VIGESSIMA
  MENSAL
}

enum Perfil {
  ADMIN
  ANALISTA
}

enum Estado {
  SOLTEIRO
  CASADO
}

model User {
  id            Int          @id @default(autoincrement())
  primeiro_nome String
  segundo_nome  String
  password      String       @unique
  genero        Genero
  bilhete       String       @unique
  telemovel     String       @unique
  email         String       @unique
  pessoa        Pessoa?
  documento     Documento[]
  devedor       Devedor?
  estado        Boolean      @default(true)
  investidor    Investidor?
  reclamacao    Reclamacao[]
  proponente    Proponente?
  saque         Saque[]
  deposito      Deposito[]
  carteira      Carteira?
  papel         Papel?
  solidario     Solidario[]
}

model Emprego {
  id          Int      @id @default(autoincrement())
  data_inicio DateTime
  sector      Sector
  cargo       String
  area        Area
  estado      Boolean  @default(true)
  pessoa      Pessoa[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Residencia {
  id          Int         @id @default(autoincrement())
  tipo        Propriedade
  data_inicio DateTime
  estado      Boolean     @default(true)
  pessoa      Pessoa[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Papel {
  id        Int      @id @default(autoincrement())
  perfil    Perfil
  user_id   Int      @unique
  estado    Boolean  @default(true)
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pessoa {
  id              Int        @id @default(autoincrement())
  estado_civil    Estado
  provincia       String
  municipio       String
  profissao       String
  estado          Boolean    @default(true)
  nivel_instrucao String
  data_nascimento DateTime
  user_id         Int        @unique
  user            User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  emprego_id      Int
  emprego         Emprego    @relation(fields: [emprego_id], references: [id], onDelete: Cascade)
  residencia_id   Int
  residencia      Residencia @relation(fields: [residencia_id], references: [id], onDelete: Cascade)
  conjugue        Conjugue?
  solidario       Solidario?
  conta           Conta?
}

model Conta {
  id        Int      @id @default(autoincrement())
  nome      String
  salario   Int
  iban      String
  estado    Boolean  @default(true)
  pessoa_id Int      @unique
  pessoa    Pessoa   @relation(fields: [pessoa_id], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conjugue {
  id              Int      @id @default(autoincrement())
  nome_completo   String
  dependentes     Int
  nivel_instrucao String
  estado          Boolean  @default(true)
  data_nascimento DateTime
  pessoa_id       Int      @unique
  pessoa          Pessoa   @relation(fields: [pessoa_id], references: [id], onDelete: Cascade)
}

model Documento {
  id            Int          @id @default(autoincrement())
  tipo          Comprovativo
  titulo        String
  extensao      String
  tamanho       String
  nome_original String
  nome_salvado  String
  estado        Boolean      @default(true)
  user_id       Int
  user          User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Devedor {
  id            Int         @id @default(autoincrement())
  user_id       Int         @unique
  user          User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  solicitacao   Int         @default(0)
  adimplencia   Int         @default(0)
  inadimplencia Int         @default(0)
  estado        Boolean     @default(true)
  credito       Credito[]
  movel         Movel[]
  pagamento     Pagamento[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Investidor {
  id                   Int              @id @default(autoincrement())
  maior_risco          Boolean
  maior_seguranca      Boolean
  saque_antecipado     Boolean
  fundo_protegido      Boolean
  estado               Boolean          @default(true)
  partilhar_emprestimo Boolean
  diversificacao       Diversificacao[]
  user_id              Int              @unique
  user                 User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
}

model Reclamacao {
  id        Int      @id @default(autoincrement())
  user_id   Int
  estado    Boolean  @default(true)
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  assunto   String
  conteudo  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Proponente {
  id            Int          @id @default(autoincrement())
  solicitacao   Int
  reembolsar    Int
  satisfeitos   Int
  insatisfeitos Int
  estado        Boolean      @default(true)
  emprestimo    Emprestimo[]
  reembolso     Reembolso[]
  user_id       Int          @unique
  user          User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Solidario {
  id         Int                   @id @default(autoincrement())
  tipo       Aval
  parentesco Parentesco
  taxa       Int
  estado     Boolean               @default(false)
  pessoa_id  Int                   @unique
  pessoa     Pessoa                @relation(fields: [pessoa_id], references: [id], onDelete: Cascade)
  emprestimo EmprestimoSolidario[]
  user_id    Int
  user       User                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  credito    CreditoSolidario[]
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
}

model Movel {
  id         Int      @id @default(autoincrement())
  modelo     Modelo
  matricula  String
  detalhes   String
  devedor_id Int
  estado     Boolean  @default(true)
  devedor    Devedor  @relation(fields: [devedor_id], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Credito {
  id         Int                @id @default(autoincrement())
  tipo       Produto
  valor      Float
  prestacao  Int
  juro       Int
  termino    DateTime
  estado     Boolean            @default(true)
  pendencia  Boolean
  progresso  Progresso
  devedor_id Int
  solidario  CreditoSolidario[]
  devedor    Devedor            @relation(fields: [devedor_id], references: [id], onDelete: Cascade)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
}

model Emprestimo {
  id              Int                   @id @default(autoincrement())
  valor           Float
  juro_proponente Int
  taxa_investidor Int
  prestacao       Int
  termino         DateTime
  estado          Boolean               @default(true)
  pendencia       Boolean
  progresso       Progresso
  diversificacao  Diversificacao[]
  solidario       EmprestimoSolidario[]
  proponente_id   Int
  proponente      Proponente            @relation(fields: [proponente_id], references: [id], onDelete: Cascade)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
}

model EmprestimoSolidario {
  estado        Boolean    @default(true)
  solidario_id  Int
  emprestimo_id Int
  solidario     Solidario  @relation(fields: [solidario_id], references: [id], onDelete: Cascade)
  emprestimo    Emprestimo @relation(fields: [emprestimo_id], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@id([solidario_id, emprestimo_id])
}

model CreditoSolidario {
  estado       Boolean   @default(true)
  solidario_id Int
  credito_id   Int
  solidario    Solidario @relation(fields: [solidario_id], references: [id], onDelete: Cascade)
  credito      Credito   @relation(fields: [credito_id], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@id([solidario_id, credito_id])
}

model Diversificacao {
  estado        Boolean    @default(true)
  investidor_id Int
  emprestimo_id Int
  taxa          Int
  protencao     Boolean
  investidor    Investidor @relation(fields: [investidor_id], references: [id], onDelete: Cascade)
  emprestimo    Emprestimo @relation(fields: [emprestimo_id], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@id([investidor_id, emprestimo_id])
}

model Saque {
  id        Int      @id @default(autoincrement())
  valor     Float
  taxa      Int
  estado    Boolean  @default(true)
  pendencia Boolean
  user_id   Int      @unique
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Deposito {
  id        Int      @id @default(autoincrement())
  valor     Float
  estado    Boolean  @default(true)
  pendencia Boolean
  user_id   Int      @unique
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Carteira {
  id        Int      @id @default(autoincrement())
  saldo     Float
  estado    Boolean  @default(true)
  numero    Int      @unique
  codigo    Int      @unique
  user_id   Int      @unique
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pagamento {
  id         Int      @id @default(autoincrement())
  valor      Float
  detalhe    String
  prestacao  Int
  estado     Boolean  @default(true)
  pendencia  Boolean
  devedor_id Int
  devedor    Devedor  @relation(fields: [devedor_id], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Reembolso {
  id            Int        @id @default(autoincrement())
  valor         Float
  prestacao     Int
  estado        Boolean    @default(true)
  detalhe       String
  proponente_id Int
  proponente    Proponente @relation(fields: [proponente_id], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Incluino as models do Analista ou Administrador
